--- ../bls/ffi/go/bls/bls.go	2020-02-05 16:13:11.094627174 +0900
+++ bls/bls.go	2020-02-05 16:18:03.303513015 +0900
@@ -1,23 +1,19 @@
 package bls
 
 /*
-#cgo bn256 CFLAGS:-DMCLBN_FP_UNIT_SIZE=4
-#cgo bn256 LDFLAGS:-lbls256
-#cgo bn384 CFLAGS:-DMCLBN_FP_UNIT_SIZE=6
-#cgo bn384 LDFLAGS:-lbls384
-#cgo bn384_256 CFLAGS:-DMCLBN_FP_UNIT_SIZE=6 -DMCLBN_FR_UNIT_SIZE=4
-#cgo bn384_256 LDFLAGS:-lbls384_256
-#cgo LDFLAGS:-lcrypto -lgmp -lgmpxx -lstdc++
-
-#cgo bn256_swapg CFLAGS:-DMCLBN_FP_UNIT_SIZE=4 -DBLS_SWAP_G
-#cgo bn256_swapg LDFLAGS:-lbls256
-#cgo bn384_swapg CFLAGS:-DMCLBN_FP_UNIT_SIZE=6 -DBLS_SWAP_G
-#cgo bn384_swapg LDFLAGS:-lbls384
-#cgo bn384_256_swapg CFLAGS:-DMCLBN_FP_UNIT_SIZE=6 -DMCLBN_FR_UNIT_SIZE=4 -DBLS_SWAP_G
-#cgo bn384_256_swapg LDFLAGS:-lbls384_256
-#cgo LDFLAGS:-lcrypto -lgmp -lgmpxx -lstdc++
+#cgo CFLAGS:-I${SRCDIR}./include -DBLS_ETH -DBLS_SWAP_G
+#cgo LDFLAGS:-lbls384_256 -lstdc++ -lm
+#cgo ios LDFLAGS:-L${SRCDIR}/lib/ios
+#cgo android,arm64 LDFLAGS:-L${SRCDIR}/lib/android/arm64-v8a
+#cgo android,arm LDFLAGS:-L${SRCDIR}/lib/android/armeabi-v7a
+#cgo android,amd64 LDFLAGS:-L${SRCDIR}/lib/android/x86_64
+#cgo linux,amd64 LDFLAGS:-L${SRCDIR}/lib/linux/amd64
+#cgo darwin,amd64 LDFLAGS:-L${SRCDIR}/lib/darwin/amd64
+#cgo darwin,arm64 LDFLAGS:-L${SRCDIR}/lib/darwin/arm64
+#cgo windows,amd64 LDFLAGS:-L${SRCDIR}/lib/windows/amd64
 typedef unsigned int (*ReadRandFunc)(void *, void *, unsigned int);
 int wrapReadRandCgo(void *self, void *buf, unsigned int n);
+#include <mcl/bn_c384_256.h>
 #include <bls/bls.h>
 */
 import "C"
@@ -694,6 +690,48 @@ func (sig *Sign) VerifyHashWithDomain(pu
 	return C.blsVerifyHashWithDomain(&sig.v, &pub.v, (*C.uchar)(unsafe.Pointer(&hashWithDomain[0]))) == 1
 }
 
+// SerializeUncompressed --
+func (pub *PublicKey) SerializeUncompressed() []byte {
+	buf := make([]byte, 2048)
+	// #nosec
+	n := C.blsPublicKeySerializeUncompressed(unsafe.Pointer(&buf[0]), C.mclSize(len(buf)), &pub.v)
+	if n == 0 {
+		panic("err blsPublicKeySerializeUncompressed")
+	}
+	return buf[:n]
+}
+
+// SerializeUncompressed --
+func (sig *Sign) SerializeUncompressed() []byte {
+	buf := make([]byte, 2048)
+	// #nosec
+	n := C.blsSignatureSerializeUncompressed(unsafe.Pointer(&buf[0]), C.mclSize(len(buf)), &sig.v)
+	if n == 0 {
+		panic("err blsSignatureSerializeUncompressed")
+	}
+	return buf[:n]
+}
+
+// DeserializeUncompressed --
+func (pub *PublicKey) DeserializeUncompressed(buf []byte) error {
+	// #nosec
+	err := C.blsPublicKeyDeserializeUncompressed(&pub.v, unsafe.Pointer(&buf[0]), C.mclSize(len(buf)))
+	if err == 0 {
+		return fmt.Errorf("err blsPublicKeyDeserializeUncompressed %x", buf)
+	}
+	return nil
+}
+
+// DeserializeUncompressed --
+func (sig *Sign) DeserializeUncompressed(buf []byte) error {
+	// #nosec
+	err := C.blsSignatureDeserializeUncompressed(&sig.v, unsafe.Pointer(&buf[0]), C.mclSize(len(buf)))
+	if err == 0 {
+		return fmt.Errorf("err blsSignatureDeserializeUncompressed %x", buf)
+	}
+	return nil
+}
+
 // VerifyAggregateHashWithDomain --
 // hashWithDomains is array of 40 * len(pubVec)
 func (sig *Sign) VerifyAggregateHashWithDomain(pubVec []PublicKey, hashWithDomains []byte) bool {
@@ -707,6 +745,93 @@ func (sig *Sign) VerifyAggregateHashWith
 	return C.blsVerifyAggregatedHashWithDomain(&sig.v, &pubVec[0].v, (*[40]C.uchar)(unsafe.Pointer(&hashWithDomains[0])), C.mclSize(n)) == 1
 }
 
+// SetETHmode --
+// 0 ; old version, 1 ; latest(eth2.0-spec phase0)
+func SetETHmode(mode int) {
+	C.blsSetETHmode(C.int(mode))
+}
+
+// SignatureVerifyOrder --
+// check the correctness of the order of signature in deserialize if true
+func SignatureVerifyOrder(doVerify bool) {
+	var b = 0
+	if doVerify {
+		b = 1
+	}
+	C.blsSignatureVerifyOrder(C.int(b))
+}
+
+// SignByte --
+func (sec *SecretKey) SignByte(msg []byte) (sig *Sign) {
+	sig = new(Sign)
+	// #nosec
+	C.blsSign(&sig.v, &sec.v, unsafe.Pointer(&msg[0]), C.mclSize(len(msg)))
+	return sig
+}
+
+// VerifyByte --
+func (sig *Sign) VerifyByte(pub *PublicKey, msg []byte) bool {
+	if sig == nil || pub == nil {
+		return false
+	}
+	// #nosec
+	return C.blsVerify(&sig.v, &pub.v, unsafe.Pointer(&msg[0]), C.mclSize(len(msg))) == 1
+}
+
+// Aggregate --
+func (sig *Sign) Aggregate(sigVec []Sign) {
+	C.blsAggregateSignature(&sig.v, &sigVec[0].v, C.mclSize(len(sigVec)))
+}
+
+// FastAggregateVerify --
+func (sig *Sign) FastAggregateVerify(pubVec []PublicKey, msg []byte) bool {
+	if pubVec == nil {
+		return false
+	}
+	n := len(pubVec)
+	return C.blsFastAggregateVerify(&sig.v, &pubVec[0].v, C.mclSize(n), unsafe.Pointer(&msg[0]), C.mclSize(len(msg))) == 1
+}
+
+func AreAllMsgDifferent(msgVec []byte, msgSize int) bool {
+	n := len(msgVec) / msgSize
+	// How can I use []byte instead of string?
+	set := map[string]struct{}{}
+	for i := 0; i < n; i++ {
+		msg := string(msgVec[i*msgSize : (i+1)*msgSize])
+		_, ok := set[msg]
+		if ok {
+			return false
+		}
+		set[msg] = struct{}{}
+	}
+	return true
+}
+
+func (sig *Sign) innerAggregateVerify(pubVec []PublicKey, msgVec []byte, checkMessage bool) bool {
+	const MSG_SIZE = 32
+	n := len(pubVec)
+	if n == 0 || len(msgVec) != MSG_SIZE*n {
+		return false
+	}
+	if checkMessage && !AreAllMsgDifferent(msgVec, MSG_SIZE) {
+		return false
+	}
+	return C.blsAggregateVerifyNoCheck(&sig.v, &pubVec[0].v, unsafe.Pointer(&msgVec[0]), MSG_SIZE, C.mclSize(n)) == 1
+}
+
+// AggregateVerify --
+// len(msgVec) == 32 * len(pubVec)
+func (sig *Sign) AggregateVerifyNoCheck(pubVec []PublicKey, msgVec []byte) bool {
+	return sig.innerAggregateVerify(pubVec, msgVec, false)
+}
+
+// AggregateVerify --
+// len(msgVec) == 32 * len(pubVec)
+// check all msgs are different each other
+func (sig *Sign) AggregateVerify(pubVec []PublicKey, msgVec []byte) bool {
+	return sig.innerAggregateVerify(pubVec, msgVec, true)
+}
+
 ///
 
 var sRandReader io.Reader
